# -*- coding: utf-8 -*-
"""VisionGuardian.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UqhUkxgPFh8x4ghhPJqcU8E1T3j4uW4c

# Importing packages
"""

# Basic packages
import pandas as pd
import numpy as np
import re
import collections
import matplotlib.pyplot as plt
from pathlib import Path

# Packages for data preparation
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from tensorflow.keras.optimizers.experimental import RMSprop
import nltk

# Packages for modeling
import tensorflow as tf
from tensorflow.keras import models
from tensorflow.keras import layers
from tensorflow.keras import regularizers

import cv2
import os
from PIL import Image

"""# Load the Dataset

"""

from google.colab import drive
drive.mount('/content/drive')

for dirname, _, filenames in os.walk('/content/drive/MyDrive/Cataract'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

train_dir = '/content/drive/MyDrive/Cataract/train'
test_dir = '/content/drive/MyDrive/Cataract/test'

img_height, img_width = 32, 32
batch_size = 16

train_ds = tf.keras.utils.image_dataset_from_directory(
    train_dir,
    image_size = (img_height, img_width),
    batch_size = batch_size
)
test_ds = tf.keras.utils.image_dataset_from_directory(
    test_dir,
    image_size = (img_height, img_width),
    batch_size = batch_size
)

"""# Adam Optimizer + Cross Entropy Loss

"""

model = tf.keras.Sequential(
    [
    #  tf.keras.layers.Rescaling(1./255),
     tf.keras.layers.Conv2D(32, 3, activation="relu"),
     tf.keras.layers.MaxPooling2D(),
     tf.keras.layers.Conv2D(32, 3, activation="relu"),
     tf.keras.layers.MaxPooling2D(),
     tf.keras.layers.Conv2D(32, 3, activation="relu"),
     tf.keras.layers.MaxPooling2D(),
     tf.keras.layers.Flatten(),
     tf.keras.layers.Dense(128, activation="relu"),
     tf.keras.layers.Dense(2)
    ]
)

model.compile(
    optimizer="adam",
    loss=tf.keras.losses.SparseCategoricalCrossentropy(
    from_logits=True,
    ignore_class=None,
    name='sparse_categorical_crossentropy'
),
    metrics=['accuracy']
)

model.fit(
    train_ds,
    validation_data = test_ds,
    epochs = 10
)

"""# Adam + Binary cross"""

image_size = (55, 94, 3)
target_size = (55, 94)

train_datagen = ImageDataGenerator(rescale=1/255)
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size = target_size,
    class_mode = 'binary'
)

model = Sequential([
    Conv2D(16, (3,3), activation='relu',input_shape=image_size),
    MaxPooling2D(2, 2),
    Conv2D(32, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(
    optimizer=RMSprop(lr=0.001),
    loss = 'binary_crossentropy',
    metrics=['accuracy']
)

model.fit_generator(
    train_generator,
    epochs=15
)

"""# CNN(1)"""

#Converting images into 3d tensors
images = {
    "train_c" : [],
    "train_n" : [],
    "test_c" : [],
    "test_n" : []
}
for dirname, _, filenames in os.walk('/content/drive/MyDrive/Cataract'):
    for filename in filenames:
        path = os.path.join(dirname, filename)
        if "train/cataract" in path:
            images['train_c'].append(tf.convert_to_tensor(Image.open(path)))
        elif "train/normal" in path:
            images["train_n"].append(tf.convert_to_tensor(Image.open(path)))
        elif "test/cataract" in path:
            images["test_c"].append(tf.convert_to_tensor(Image.open(path)))
        elif "test/normal" in path:
            images["test_n"].append(tf.convert_to_tensor(Image.open(path)))

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(32, # No. of filters
                         (3,3), # Kernel size
                         activation='relu',
                         input_shape=(28, 28, 1) # inputs are 28x28 RGB images with `channels_last` format
                         ),
  tf.keras.layers.MaxPooling2D(2, 2),
  tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
  tf.keras.layers.MaxPooling2D(2, 2),
  tf.keras.layers.Flatten(),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dense(10, activation='softmax')
])